<?xml version='1.0' encoding="UTF-8" ?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">

<!--
#
#   http://code.google.com/media-translate/
#   Copyright (C) 2010  Serge A. Timchenko
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program. If not, see <http://www.gnu.org/licenses/>.
#
-->

<onEnter>
  cachePath = getStoragePath("key");
  pause = 0;
  optionsPath = cachePath + "sub.dat";
  optionsArray = readStringFromFile(optionsPath);
  if(optionsArray == null)
  {
    transp = "0:0:0";
    culoare = "255:255:255";
    fontsize = "20";
    fontoffset = "0";
    fontn = "1";
    fix = "1";
  }
  else
  {
    fontcol = getStringArrayAt(optionsArray, 0);
    transp = getStringArrayAt(optionsArray, 1);
    fontsize = getStringArrayAt(optionsArray, 2);
    fontoffset = getStringArrayAt(optionsArray, 3);
    fontn = getStringArrayAt(optionsArray, 4);
    fix = getStringArrayAt(optionsArray, 5);
  }

if (fontsize &lt; 24)
{
  wh=7;
  mt=2;
}
else
{
	if (fontsize &gt;=24 &amp;&amp; fontsize &lt; 26)
		{
			wh=8.5;
			mt=2;
		}	
		else
		{
			wh=9;
			mt=2.1;
		}
}

if (fontn == "1")
fontname="/usr/local/etc/www/cgi-bin/scripts/util/arial.ttf";
else if (fontn == "2")
fontname="/usr/local/etc/www/cgi-bin/scripts/util/arialrb.ttf";
else if (fontn == "3")
fontname="/usr/local/etc/www/cgi-bin/scripts/util/arialnb.ttf";

  storagePath             = getStoragePath("tmp");
  storagePath_stream      = storagePath + "stream.dat";

  arr = readStringFromFile(storagePath_stream);
  if(arr != null)
  {
    request_url     = getStringArrayAt(arr, 0);
    request_options = getStringArrayAt(arr, 1);
    stream_url      = getStringArrayAt(arr, 2);
    url             = getStringArrayAt(arr, 3);
    stream_type     = getStringArrayAt(arr, 4);
    stream_title    = getStringArrayAt(arr, 5);
    no_renderer     = getStringArrayAt(arr, 6);

  }
  else
  {
    postMessage("return");
  }
  subs = readStringFromFile("/tmp/test.xml");
  if(subs != null)
  {
	    nTotSubs=3000;
	    ntime_start=0;
	    ntime_end=0;
	    ntime_next_start=0;
	    tline1="";
	    tline2="";
	    last_tline1="";
	    last_tline2="";
	    nCurSub=0;
	    nRef=0;
	}
  else
	{
	  nTotSubs = 0;
		cancelIdle();
		tline1="Fara subtitrare !";
		tline2="";
	}  
  yy=0;
  ref=0;
  show_time = 0;
  nn1=0;
  nn2=0;
  first_time=0;
  delay = 0;
  sincro1 = "";
  playItemURL(url, 0, "mediaDisplay", "previewWindow");
  setRefreshTime(250);
  cancelIdle();
  redrawDisplay();
</onEnter>

<onExit>
	playItemURL(-1, 1);
	setRefreshTime(-1);
</onExit>

<onRefresh>
	stream_progress  = getPlaybackStatus();
	buffer_progress  = getCachedStreamDataSize(0, 262144);
	buffer           = getStringArrayAt(buffer_progress, 0);
	play_elapsed     = getStringArrayAt(stream_progress, 0);
	play_total       = getStringArrayAt(stream_progress, 1);
	play_rest        = play_total - play_elapsed;
	play_status      = getStringArrayAt(stream_progress, 3);
	

	if (play_elapsed != 0)
	{
    if (first_time == 1) 
    {
      tline1="";
      tline2="";
      first_time=0;
    }
    arg_time = play_elapsed;
		x = Integer(arg_time / 60);
		h = Integer(arg_time / 3600);
		s = arg_time - (x * 60);
		m = x - (h * 60);
		if(h &lt; 10) 
			ret_string = "0" + sprintf("%s:", h);
		else
			ret_string = sprintf("%s:", h);
		if(m &lt; 10)  ret_string += "0";
		ret_string += sprintf("%s:", m);
		if(s &lt; 10)  ret_string += "0";
		ret_string += sprintf("%s", s);
    stream_elapsed = ret_string;
    
		  arg_time = play_total;
  		x = Integer(arg_time / 60);
  		h = Integer(arg_time / 3600);
  		s = arg_time - (x * 60);
  		m = x - (h * 60);
  		if(h &lt; 10) 
  			ret_string = "0" + sprintf("%s:", h);
  		else
  			ret_string = sprintf("%s:", h);
  		if(m &lt; 10)  ret_string += "0";
  		ret_string += sprintf("%s:", m);
  		if(s &lt; 10)  ret_string += "0";
  		ret_string += sprintf("%s", s);
		  stream_total = ret_string;
    if (show_time == 1)
      {
        sincro1="Sincro: " + delay + " sec.";
        stream_elapsed1 = stream_elapsed + " / " + stream_total;
      }
    if (fix != "2")
    {
    ref +=  1;
    if (ref &gt; 200) postMessage("edit");
	  if (ref &gt; 200) ref = 0;    
    }
		if (play_total &gt; 0 &amp;&amp; play_total &lt; 1000000 &amp;&amp; nTotSubs &gt; 2 &amp;&amp; nCurSub &lt; nTotSubs)
		{
	    nNext = nCurSub + 1;
		  ntime_start = delay + getStringArrayAt(subs,4*nCurSub);
		  ntime_end = delay + getStringArrayAt(subs,1 + 4*nCurSub);
		  ntime_next_start = delay + getStringArrayAt(subs,4*nNext);
		  if (play_elapsed &gt;= ntime_start &amp;&amp; play_elapsed &lt; ntime_end)
		  {
		    tline1 = getStringArrayAt(subs,2 + 4*nCurSub);
		    tline2 = getStringArrayAt(subs,3 + 4*nCurSub);
		    if (tline1 == "" || tline1 == " " || tline1 == null)
		      nn1 = 0;
		    else
		      nn1 = 1;
		    if (tline2 == "" || tline2 == " " || tline2 == null)
		      nn2 = 0;
		    else
		      nn2 = 1;
		  }	   
      else if (play_elapsed &gt;= ntime_end)
      {
        while (1)
        {
        nCurSub = nCurSub + 1 ;
        if (nCurSub &gt;= nTotSubs)
          {
           tline1="";
           tline2="";
           break;
          }
           tt1 = delay + getStringArrayAt(subs,4*nCurSub);
           if (tt1 &gt;= play_elapsed) break;             
        }
      }
      else
        nCurSub=0;
		}
	}
	else
	{
    tline2="wait...";
    first_time=1;	
	}
updatePlaybackProgress(buffer_progress, "mediaDisplay", "infoDisplay");
</onRefresh>

<mediaDisplay name="threePartsView" 
  showDefaultInfo="no" 
  showHeader="no" 
  sideLeftWidthPC="0" 
  sideRightWidthPC="0" 
  backgroundColor="0:0:0"
  idleImageXPC="5" idleImageYPC="5" idleImageWidthPC="8" idleImageHeightPC="10"
  >

        <idleImage>image/POPUP_LOADING_01.png</idleImage>
        <idleImage>image/POPUP_LOADING_02.png</idleImage>
        <idleImage>image/POPUP_LOADING_03.png</idleImage>
        <idleImage>image/POPUP_LOADING_04.png</idleImage>
        <idleImage>image/POPUP_LOADING_05.png</idleImage>
        <idleImage>image/POPUP_LOADING_06.png</idleImage>
        <idleImage>image/POPUP_LOADING_07.png</idleImage>
        <idleImage>image/POPUP_LOADING_08.png</idleImage>
	


  <previewWindow windowColor="0:0:0" offsetXPC="0" widthPC="100" offsetYPC="0" heightPC="100">

  </previewWindow>
<infoDisplay offsetXPC="0" offsetYPC="0" widthPC="100" heightPC="100">

    		<text fontFile="/usr/local/etc/www/cgi-bin/scripts/util/arial.ttf" lines="1" useBackgroundSurface="yes" align="left" redraw="yes" offsetXPC="2.5" offsetYPC="2.5" widthPC="50" heightPC="6" fontSize="20" backgroundColor="-1:-1:-1" foregroundColor="255:255:255">
  			<script>stream_elapsed1;</script>
  		</text>
    		<text fontFile="/usr/local/etc/www/cgi-bin/scripts/util/arial.ttf" lines="1" useBackgroundSurface="yes" align="right" redraw="yes" offsetXPC="65" offsetYPC="2.5" widthPC="30" heightPC="6" fontSize="20" backgroundColor="-1:-1:-1" foregroundColor="255:255:255">
  			<script>sincro1;</script>
  		</text>

    		<text align="center" redraw="yes" offsetXPC="0" useBackgroundSurface="yes">
  			<script>tline1;</script>
  			<fontFile>
  			<script>
  			fontname;
  			</script>
  			</fontFile>
  			<offsetYPC>
  			<script>
  			99 + fontoffset - mt*wh;
  			</script>
  			</offsetYPC>
  			<fontSize>
  			<script>
  			fontsize;
  			</script>
  			</fontSize>
  			<foregroundColor>
  			<script>
           fontcol;
  			</script>
  			</foregroundColor>
  			<backgroundColor>
  			<script>
  			if (nn1 == 1)
          transp;
        else
          "-1:-1:-1";
  			</script>
  			</backgroundColor>
  			<widthPC>
  			<script>
  			   100;
  			</script> 
  			</widthPC>
  			<heightPC>
  			<script>
            wh; 
  			</script>
  			</heightPC>
  		</text>
    		<text align="center" redraw="yes" offsetXPC="0" useBackgroundSurface="yes">
  			<script>tline2;</script>
  			<fontFile>
  			<script>
        fontname;
  			</script>
  			</fontFile>
  			<offsetYPC>
  			<script>
  			 98 + fontoffset - wh; 			
  			</script>
  			</offsetYPC>
  			<fontSize>
  			<script>
  			fontsize;
  			</script>
  			</fontSize>
  			<foregroundColor>
  			<script>
  			fontcol;
  			</script>
  			</foregroundColor>
  			<backgroundColor>
  			<script>
  			if (nn2 == 1)
          transp;
        else
          "-1:-1:-1";
  			</script>
  			</backgroundColor>
  			<widthPC>
  			<script>
  			   100;
  			</script> 
  			</widthPC>
  			<heightPC>
  			<script>
           wh;
  			</script>
  			</heightPC>
  		</text>
</infoDisplay>
<onUserInput>
	input = currentUserInput();
	print("**** input=",input);
	ret = "false";
	status = getPlaybackStatus();
	playStatus = getStringArrayAt(status, 3);
if (input == "display" || input == "DISPLAY")
{
  show_time = 1 - show_time;
  stream_elapsed1 = "";
  sincro1= "";
  ret = "true";
}
else if ((input == "enter" || input == "ENTR") &amp;&amp; pause == 1)
{
	    postMessage("video_play");
	    pause = 0;
      ret = "true";
}
else if ((input == "enter" || input == "ENTR") &amp;&amp; pause == 0)
{
     postMessage("video_pause");
     pause = 1;
     ret = "true";
}
else if (input == "video_completed" || input == "video_stop")
{
    playItemURL(-1, 1);
    postMessage("return");
}
else if (input == "right" || input == "left" || input == "R" || input == "L")
{
	if (playStatus == "2")
	{
		setEnv("videoStatus", status);
		playItemURL(-1, 2);
		print("LOUIS - link to seekpop");
		timePoint = doModalRss("/usr/local/etc/www/cgi-bin/scripts/util/podcast_seekpopup.rss");
		if (timePoint != -1)
		{
			playAtTime(timePoint);
		}

		ret = "true";
	}
}
else if ( transp == "-1:-1:-1" )
{
        if (input == "up" || input == "U")
        { 
                fontoffset = fontoffset - "0.5" ;
                ret = "true";
        }
        else if (input == "down" || input == "D")
        { 
                fontoffset = "0.5" + fontoffset ;
                ret = "true";
        }
}
else if (input == "one" || input == "1")
{
delay = delay - 1;
ret = "true";
}
else if (input == "three" || input == "3")
{
delay = delay + 1;
ret = "true";
}
else if (input == "two" || input == "2")
{
delay = 0;
ret = "true";
}
		ret;
</onUserInput>
	
</mediaDisplay>


<channel>
	<title>video stream player</title>
</channel>

</rss>